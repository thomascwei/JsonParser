// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createObjectIDsStmt, err = db.PrepareContext(ctx, CreateObjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query CreateObjectIDs: %w", err)
	}
	if q.createTemplateStmt, err = db.PrepareContext(ctx, CreateTemplate); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTemplate: %w", err)
	}
	if q.deleteObjectIDsStmt, err = db.PrepareContext(ctx, DeleteObjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteObjectIDs: %w", err)
	}
	if q.deleteTemplateStmt, err = db.PrepareContext(ctx, DeleteTemplate); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTemplate: %w", err)
	}
	if q.getObjectIDsStmt, err = db.PrepareContext(ctx, GetObjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetObjectIDs: %w", err)
	}
	if q.getTemplateStmt, err = db.PrepareContext(ctx, GetTemplate); err != nil {
		return nil, fmt.Errorf("error preparing query GetTemplate: %w", err)
	}
	if q.listTemplatesStmt, err = db.PrepareContext(ctx, ListTemplates); err != nil {
		return nil, fmt.Errorf("error preparing query ListTemplates: %w", err)
	}
	if q.listTemplatesForParseStmt, err = db.PrepareContext(ctx, ListTemplatesForParse); err != nil {
		return nil, fmt.Errorf("error preparing query ListTemplatesForParse: %w", err)
	}
	if q.updateObjectIDsStmt, err = db.PrepareContext(ctx, UpdateObjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateObjectIDs: %w", err)
	}
	if q.updateTemplateStmt, err = db.PrepareContext(ctx, UpdateTemplate); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTemplate: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createObjectIDsStmt != nil {
		if cerr := q.createObjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createObjectIDsStmt: %w", cerr)
		}
	}
	if q.createTemplateStmt != nil {
		if cerr := q.createTemplateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTemplateStmt: %w", cerr)
		}
	}
	if q.deleteObjectIDsStmt != nil {
		if cerr := q.deleteObjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteObjectIDsStmt: %w", cerr)
		}
	}
	if q.deleteTemplateStmt != nil {
		if cerr := q.deleteTemplateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTemplateStmt: %w", cerr)
		}
	}
	if q.getObjectIDsStmt != nil {
		if cerr := q.getObjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getObjectIDsStmt: %w", cerr)
		}
	}
	if q.getTemplateStmt != nil {
		if cerr := q.getTemplateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTemplateStmt: %w", cerr)
		}
	}
	if q.listTemplatesStmt != nil {
		if cerr := q.listTemplatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTemplatesStmt: %w", cerr)
		}
	}
	if q.listTemplatesForParseStmt != nil {
		if cerr := q.listTemplatesForParseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTemplatesForParseStmt: %w", cerr)
		}
	}
	if q.updateObjectIDsStmt != nil {
		if cerr := q.updateObjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateObjectIDsStmt: %w", cerr)
		}
	}
	if q.updateTemplateStmt != nil {
		if cerr := q.updateTemplateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTemplateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createObjectIDsStmt       *sql.Stmt
	createTemplateStmt        *sql.Stmt
	deleteObjectIDsStmt       *sql.Stmt
	deleteTemplateStmt        *sql.Stmt
	getObjectIDsStmt          *sql.Stmt
	getTemplateStmt           *sql.Stmt
	listTemplatesStmt         *sql.Stmt
	listTemplatesForParseStmt *sql.Stmt
	updateObjectIDsStmt       *sql.Stmt
	updateTemplateStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createObjectIDsStmt:       q.createObjectIDsStmt,
		createTemplateStmt:        q.createTemplateStmt,
		deleteObjectIDsStmt:       q.deleteObjectIDsStmt,
		deleteTemplateStmt:        q.deleteTemplateStmt,
		getObjectIDsStmt:          q.getObjectIDsStmt,
		getTemplateStmt:           q.getTemplateStmt,
		listTemplatesStmt:         q.listTemplatesStmt,
		listTemplatesForParseStmt: q.listTemplatesForParseStmt,
		updateObjectIDsStmt:       q.updateObjectIDsStmt,
		updateTemplateStmt:        q.updateTemplateStmt,
	}
}
