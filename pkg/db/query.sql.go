// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const CreateObjectIDs = `-- name: CreateObjectIDs :execresult
INSERT INTO objectids (template_id, serial, object_id)
VALUES (?, ?, ?)
`

type CreateObjectIDsParams struct {
	TemplateID int32  `json:"template_id"`
	Serial     int32  `json:"serial"`
	ObjectID   string `json:"object_id"`
}

func (q *Queries) CreateObjectIDs(ctx context.Context, arg CreateObjectIDsParams) (sql.Result, error) {
	return q.exec(ctx, q.createObjectIDsStmt, CreateObjectIDs, arg.TemplateID, arg.Serial, arg.ObjectID)
}

const CreateTemplate = `-- name: CreateTemplate :execresult
INSERT INTO template (template_name, description, parse_type, auto_gen_object_id, origin_object_id,
                      value_extract, go_struct)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateTemplateParams struct {
	TemplateName    string `json:"template_name"`
	Description     string `json:"description"`
	ParseType       int32  `json:"parse_type"`
	AutoGenObjectID bool   `json:"auto_gen_object_id"`
	OriginObjectID  string `json:"origin_object_id"`
	ValueExtract    string `json:"value_extract"`
	GoStruct        string `json:"go_struct"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (sql.Result, error) {
	return q.exec(ctx, q.createTemplateStmt, CreateTemplate,
		arg.TemplateName,
		arg.Description,
		arg.ParseType,
		arg.AutoGenObjectID,
		arg.OriginObjectID,
		arg.ValueExtract,
		arg.GoStruct,
	)
}

const DeleteObjectIDs = `-- name: DeleteObjectIDs :exec
DELETE
FROM objectids
WHERE template_id = ?
`

func (q *Queries) DeleteObjectIDs(ctx context.Context, templateID int32) error {
	_, err := q.exec(ctx, q.deleteObjectIDsStmt, DeleteObjectIDs, templateID)
	return err
}

const DeleteTemplate = `-- name: DeleteTemplate :exec
DELETE
FROM template
WHERE id = ?
`

func (q *Queries) DeleteTemplate(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteTemplateStmt, DeleteTemplate, id)
	return err
}

const GetObjectIDs = `-- name: GetObjectIDs :many
SELECT id, template_id, serial, object_id, created_at, updated_at
FROM objectids
WHERE template_id = ?
`

func (q *Queries) GetObjectIDs(ctx context.Context, templateID int32) ([]Objectid, error) {
	rows, err := q.query(ctx, q.getObjectIDsStmt, GetObjectIDs, templateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Objectid
	for rows.Next() {
		var i Objectid
		if err := rows.Scan(
			&i.ID,
			&i.TemplateID,
			&i.Serial,
			&i.ObjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTemplate = `-- name: GetTemplate :one
SELECT id, template_name, description, parse_type, auto_gen_object_id, origin_object_id, value_extract, go_struct, created_at, updated_at
FROM template
WHERE id = ?
`

func (q *Queries) GetTemplate(ctx context.Context, id int32) (Template, error) {
	row := q.queryRow(ctx, q.getTemplateStmt, GetTemplate, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateName,
		&i.Description,
		&i.ParseType,
		&i.AutoGenObjectID,
		&i.OriginObjectID,
		&i.ValueExtract,
		&i.GoStruct,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListTemplates = `-- name: ListTemplates :many
SELECT id, template_name, description
FROM template
ORDER BY id
`

type ListTemplatesRow struct {
	ID           int32  `json:"id"`
	TemplateName string `json:"template_name"`
	Description  string `json:"description"`
}

func (q *Queries) ListTemplates(ctx context.Context) ([]ListTemplatesRow, error) {
	rows, err := q.query(ctx, q.listTemplatesStmt, ListTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTemplatesRow
	for rows.Next() {
		var i ListTemplatesRow
		if err := rows.Scan(&i.ID, &i.TemplateName, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTemplatesForParse = `-- name: ListTemplatesForParse :many
SELECT id, parse_type, value_extract, go_struct
FROM template
ORDER BY id
`

type ListTemplatesForParseRow struct {
	ID           int32  `json:"id"`
	ParseType    int32  `json:"parse_type"`
	ValueExtract string `json:"value_extract"`
	GoStruct     string `json:"go_struct"`
}

func (q *Queries) ListTemplatesForParse(ctx context.Context) ([]ListTemplatesForParseRow, error) {
	rows, err := q.query(ctx, q.listTemplatesForParseStmt, ListTemplatesForParse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTemplatesForParseRow
	for rows.Next() {
		var i ListTemplatesForParseRow
		if err := rows.Scan(
			&i.ID,
			&i.ParseType,
			&i.ValueExtract,
			&i.GoStruct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateObjectIDs = `-- name: UpdateObjectIDs :exec
UPDATE objectids
set template_id=?,
    serial=?,
    object_id=?,
    updated_at=?
WHERE id = ?
`

type UpdateObjectIDsParams struct {
	TemplateID int32        `json:"template_id"`
	Serial     int32        `json:"serial"`
	ObjectID   string       `json:"object_id"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	ID         int32        `json:"id"`
}

func (q *Queries) UpdateObjectIDs(ctx context.Context, arg UpdateObjectIDsParams) error {
	_, err := q.exec(ctx, q.updateObjectIDsStmt, UpdateObjectIDs,
		arg.TemplateID,
		arg.Serial,
		arg.ObjectID,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const UpdateTemplate = `-- name: UpdateTemplate :exec
UPDATE template
SET template_name=?,
    description=?,
    parse_type=?,
    auto_gen_object_id=?,
    origin_object_id=?,
    value_extract=?,
    go_struct=?,
    updated_at=?
WHERE id = ?
`

type UpdateTemplateParams struct {
	TemplateName    string    `json:"template_name"`
	Description     string    `json:"description"`
	ParseType       int32     `json:"parse_type"`
	AutoGenObjectID bool      `json:"auto_gen_object_id"`
	OriginObjectID  string    `json:"origin_object_id"`
	ValueExtract    string    `json:"value_extract"`
	GoStruct        string    `json:"go_struct"`
	UpdatedAt       time.Time `json:"updated_at"`
	ID              int32     `json:"id"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) error {
	_, err := q.exec(ctx, q.updateTemplateStmt, UpdateTemplate,
		arg.TemplateName,
		arg.Description,
		arg.ParseType,
		arg.AutoGenObjectID,
		arg.OriginObjectID,
		arg.ValueExtract,
		arg.GoStruct,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
