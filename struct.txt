package thomas

import (
	"encoding/json"
	"fmt"
	"strconv"
)

type AutoGenerated struct {
	Person struct {
		Name struct {
			First    string `json:"first"`
			Last     string `json:"last"`
			FullName string `json:"fullName"`
		} `json:"name"`
		Github struct {
			Handle    string `json:"handle"`
			Followers int    `json:"followers"`
		} `json:"github"`
		Avatars []struct {
			Ff     int64  `json:"ff"`
			URL    string `json:"url"`
			Type   string `json:"type"`
			Inside []struct {
				Aa struct {
					Zz float64 `json:"zz"`
				} `json:"aa"`
				Bb int `json:"bb"`
			} `json:"inside"`
		} `json:"avatars"`
	} `json:"person"`
	Company struct {
		Name string    `json:"name"`
		List []float64 `json:"list"`
		Strs []string  `json:"strs"`
	} `json:"company"`
}

var rr AutoGenerated

func GetResult(data []byte) (result []string) {
	// Person.Avatars[array].Inside[array].Aa.Zz
	json.Unmarshal(data, &rr)
	for _, v := range rr.Person.Avatars {
		for _, v := range v.Inside {
			result = append(result, ConvertToString(v.Aa.Zz))
		}
		// result = append(result, ConvertToString(v.Ff))
	}
	return
}

func ConvertToString(any interface{}) string {
	switch any.(type) {
	case int64:
		return strconv.FormatInt(any.(int64), 10)
	case float64:
		return fmt.Sprintf("%f", any) // s == "123.456000"
	default:
		return any.(string)
	}
}

